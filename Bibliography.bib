@ARTICLE{PMSCP,
	author={Mahmoudi, Nima and Khazaei, Hamzeh},
	journal={IEEE Transactions on Cloud Computing}, 
	title={Performance Modeling of Serverless Computing Platforms}, 
	year={2020},
	volume={},
	number={},
	pages={1-1},
	abstract={Analytical performance models have been leveraged extensively to analyze and improve the performance and cost of various cloud computing services. However, in the case of serverless computing, which is projected to be the dominant form of cloud computing, we have not seen analytical performance models to help with the analysis and optimization of such platforms. In this work, we propose an analytical performance model that captures the unique details of serverless platforms. The model can be leveraged to improve the quality of service and resource utilization and reduce the operational cost of serverless platforms. Also, the proposed performance model provides a framework that enables serverless platforms to become workload-aware and operate differently for different workloads to provide a better trade-off between the cost and performance depending on the user's preferences. We validate the applicability and accuracy of the proposed model by extensive experimentation on AWS Lambda. We show that the proposed model can calculate essential performance metrics like average response time, probability of cold start, and the average number of function instances in steady-state. Also, the performance model can be used to tune the platform for each workload resulting in better performance or lower cost without scarifying the other.},
	keywords={},
	doi={10.1109/TCC.2020.3033373},
	ISSN={2168-7161},
	month={},}

@INPROCEEDINGS{COSE,
	author={Akhtar, Nabeel and Raza, Ali and Ishakian, Vatche and Matta, Ibrahim},
	booktitle={IEEE INFOCOM 2020 - IEEE Conference on Computer Communications}, 
	title={COSE: Configuring Serverless Functions using Statistical Learning}, 
	year={2020},
	volume={},
	number={},
	pages={129-138},
	abstract={Serverless computing has emerged as a new compelling paradigm for the deployment of applications and services. It represents an evolution of cloud computing with a simplified programming model, that aims to abstract away most operational concerns. Running serverless functions requires users to configure multiple parameters, such as memory, CPU, cloud provider, etc. While relatively simpler, configuring such parameters correctly while minimizing cost and meeting delay constraints is not trivial. In this paper, we present COSE, a framework that uses Bayesian Optimization to find the optimal configuration for serverless functions. COSE uses statistical learning techniques to intelligently collect samples and predict the cost and execution time of a serverless function across unseen configuration values. Our framework uses the predicted cost and execution time, to select the "best" configuration parameters for running a single or a chain of functions, while satisfying customer objectives. In addition, COSE has the ability to adapt to changes in the execution time of a serverless function. We evaluate COSE not only on a commercial cloud provider, where we successfully found optimal/near-optimal configurations in as few as five samples, but also over a wide range of simulated distributed cloud environments that confirm the efficacy of our approach.},
	keywords={},
	doi={10.1109/INFOCOM41043.2020.9155363},
	ISSN={2641-9874},
	month={July},}

@unknown{BerkeleyView,
	author = {Jonas, Eric and Schleier-Smith, Johann and Sreekanti, Vikram and Tsai, Chia-Che and Khandelwal, Anurag and Pu, Qifan and Shankar, Vaishaal and Carreira, Joao and Krauth, Karl and Yadwadkar, Neeraja and Gonzalez, Joseph and Popa, Raluca and Stoica, Ion and Patterson, David},
	year = {2019},
	month = {02},
	pages = {},
	title = {Cloud Programming Simplified: A Berkeley View on Serverless Computing}
}

@article{NextPhase,
	author = {Schleier-Smith, Johann and Sreekanti, Vikram and Khandelwal, Anurag and Carreira, Joao and Yadwadkar, Neeraja J. and Popa, Raluca Ada and Gonzalez, Joseph E. and Stoica, Ion and Patterson, David A.},
	title = {What Serverless Computing is and Should Become: The next Phase of Cloud Computing},
	year = {2021},
	issue_date = {May 2021},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {64},
	number = {5},
	issn = {0001-0782},
	url = {https://doi.org/10.1145/3406011},
	doi = {10.1145/3406011},
	abstract = {The evolution that serverless computing represents, the economic forces that shape it, why it could fail, and how it might fulfill its potential.},
	journal = {Commun. ACM},
	month = {apr},
	pages = {76–84},
	numpages = {9}
}

@inproceedings{CharacterizingServerless,
	author = {Yu, Tianyi and Liu, Qingyuan and Du, Dong and Xia, Yubin and Zang, Binyu and Lu, Ziqian and Yang, Pingchao and Qin, Chenggang and Chen, Haibo},
	title = {Characterizing Serverless Platforms with Serverlessbench},
	year = {2020},
	isbn = {9781450381376},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3419111.3421280},
	doi = {10.1145/3419111.3421280},
	abstract = {Serverless computing promises auto-scalability and cost-efficiency (in "pay-as-you-go" manner) for high-productive software development. Because of its virtue, serverless computing has motivated increasingly new applications and services in the cloud. This, however, also presents new challenges including how to efficiently design high-performance serverless platforms and how to efficiently program on the platforms.This paper proposes ServerlessBench, an open-source benchmark suite for characterizing serverless platforms. It includes test cases exploring characteristic metrics of serverless computing, e.g., communication efficiency, startup latency, stateless overhead, and performance isolation. We have applied the benchmark suite to evaluate the most popular serverless computing platforms, including AWS Lambda, Open-Whisk, and Fn, and present new serverless implications from the study. For example, we show scenarios where decoupling an application into a composition of serverless functions can be beneficial in cost-saving and performance, and that the "stateless" property in serverless computing can hurt the execution performance of serverless functions. These implications form several design guidelines, which may help platform designers to optimize serverless platforms and application developers to design their functions best fit to the platforms.},
	booktitle = {Proceedings of the 11th ACM Symposium on Cloud Computing},
	pages = {30–44},
	numpages = {15},
	location = {Virtual Event, USA},
	series = {SoCC '20}
}

@inproceedings{Sequoia,
	author = {Tariq, Ali and Pahl, Austin and Nimmagadda, Sharat and Rozner, Eric and Lanka, Siddharth},
	year = {2020},
	month = {10},
	pages = {311-327},
	title = {Sequoia: enabling quality-of-service in serverless computing},
	doi = {10.1145/3419111.3421306}
}

@ARTICLE{Modelling,	
	author={Lin, Changyuan and Khazaei, Hamzeh},	
	journal={IEEE Transactions on Parallel and Distributed Systems}, 	
	title={Modeling and Optimization of Performance and Cost of Serverless Applications}, 	
	year={2021},	
	volume={32},	
	number={3},
	pages={615-632},
	doi={10.1109/TPDS.2020.3028841}}

@misc{AWSLambda,
	title = {Serverless Computing - AWS Lambda - Amazon Web Services},
	year = "2022",
	howpublished = "\url{https://aws.amazon.com/lambda/}",
	note = "[Online; accessed 17-March-2022]"
}

@misc{GoogleCloud,
	title = {Cloud Functions | Google Cloud},
	year = "2022",
	howpublished = "\url{https://cloud.google.com/functions/}",
	note = "[Online; accessed 17-March-2022]"
}

@misc{AzureFunctions,
	title = {Azure Functions - Serverless Apps and Computing | Microsoft Azure},
	year = "2022",
	howpublished = "\url{https://azure.microsoft.com/en-us/services/functions/}",
	note = "[Online; accessed 17-March-2022]"
}

@misc{IBMCloudFunctions,
	title = {IBM Cloud Functions},
	year = "2022",
	howpublished = "\url{https://cloud.ibm.com/functions/}",
	note = "[Online; accessed 17-March-2022]"
}


@misc{OpenWhisk,
	title = {Apache OpenWhisk},
	year = "2022",
	howpublished = "\url{https://openwhisk.apache.org/}",
	note = "[Online; accessed 21-March-2022]"
}

@INPROCEEDINGS{MSA,
	
	author={Satyanarayanan, Mahadev and Klas, Guenter and Silva, Marco and Mangiante, Simone},	
	booktitle={2019 IEEE International Conference on Edge Computing (EDGE)}, 	
	title={The Seminal Role of Edge-Native Applications}, 	
	year={2019},	
	volume={},	
	number={},	
	pages={33-40},
	doi={10.1109/EDGE.2019.00022}
}

@book{SDCC,
	
	author={M. van Steen and A.S. Tanenbaum},	
	title={Distributed Systems}, 	
	year={2017},
	edition = 3,	
	publisher = {distributed-systems.ne},
}

@book{SDCCNUMERO2,
	author = {Coulouris, George and Dollimore, Jean and Kindberg, Tim and Blair, Gordon},
	title = {Distributed Systems: Concepts and Design},
	year = {2011},
	isbn = {0132143011},
	publisher = {Addison-Wesley Publishing Company},
	address = {USA},
	edition = {5th},
	abstract = {Broad and up-to-date coverage of the principles and practice in the fast moving area of Distributed Systems. Distributed Systems provides students of computer science and engineering with the skills they will need to design and maintain software for distributed applications. It will also be invaluable to software engineers and systems designers wishing to understand new and future developments in the field. From mobile phones to the Internet, our lives depend increasingly on distributed systems linking computers and other devices together in a seamless and transparent way. The fifth edition of this best-selling text continues to provide a comprehensive source of material on the principles and practice of distributed computer systems and the exciting new developments based on them, using a wealth of modern case studies to illustrate their design and development. The depth of coverage will enable readers to evaluate existing distributed systems and design new ones.}
}

@misc{HTTP,
	title = {Hypertext Transfer Protocol -- HTTP/1.1},
	year = "2022",
	howpublished = "\url{https://www.ietf.org/rfc/rfc2616.txt}",
	note = "[Online; accessed 22-March-2022]"
}

@inproceedings{Guinard,
	title={A Web of Things Application Architecture Integrating the Real-World into the Web},
	author={Dominique Guinard},
	year={2011}
}

@article{AFCL,
	author = {Ristov, Sasko and Pedratscher, Stefan and Fahringer, Thomas},
	year = {2020},
	month = {08},
	pages = {},
	title = {AFCL: An Abstract Function Choreography Language for serverless workflow specification},
	volume = {114},
	journal = {Future Generation Computer Systems},
	doi = {10.1016/j.future.2020.08.012}
}

@misc{IBMComposer,
	title = {Introducing Serverless Composition for IBM Cloud Functions},
	year = "2022",
	howpublished = "\url{https://www.ibm.com/cloud/blog/serverless-composition-ibm-cloud-functions}",
	note = "[Online; accessed 24-March-2022]"
}

@misc{StepFunctions,
	title = {AWS Step Functions - Visual workflows for modern applications },
	year = "2022",
	howpublished = "\url{https://aws.amazon.com/step-functions/}",
	note = "[Online; accessed 24-March-2022]"
}

@misc{DurableFunctions,
	title = {Azure Durable Functions Overview},
	year = "2022",
	howpublished = "\url{https://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-overview}",
	note = "[Online; accessed 24-March-2022]"
}

@article{Tactics,
	author = {Lewis, Grace and Lago, Patricia},
	year = {2015},
	month = {06},
	pages = {},
	title = {Architectural Tactics for Cyber-Foraging: Results of a Systematic Literature Review},
	volume = {107},
	journal = {Journal of Systems and Software},
	doi = {10.1016/j.jss.2015.06.005}
}

@misc{influx,
	title = {InfluxDB: Open Source Time Series Database | InfluxData},
	year = "2022",
	howpublished = "\url{https://www.influxdata.com/}",
	note = "[Online; accessed 29-March-2022]"
}

@misc{Go,
	title = {The Go Programming Language},
	year = "2022",
	howpublished = "\url{https://go.dev/}",
	note = "[Online; accessed 08-April-2022]"
}

@misc{SonarQube,
	title = {Code Quality and Code Security | SonarQube},
	year = "2022",
	howpublished = "\url{https://www.sonarqube.org/}",
	note = "[Online; accessed 08-April-2022]"
}

@unknown{NUOVODOCUMENTO,
	author = {Jindal, Anshul and Gerndt, Michael and Chadha, Mohak and Podolskiy, Vladimir and Chen, Pengfei},
	year = {2021},
	month = {02},
	pages = {},
	title = {Function Delivery Network: Extending Serverless Computing for Heterogeneous Platforms},
	volume = {51},
	journal = {Software: Practice and Experience},
	doi = {10.1002/spe.2966}
}

@misc{AWSTimeout,
	title = {AWS Lambda Timeout},
	year = "2022",
	howpublished = "\url{https://aws.amazon.com/about-aws/whats-new/2018/10/aws-lambda-supports-functions-that-can-run-up-to-15-minutes/}",
	note = "[Online; accessed 09-April-2022]"
}

@inproceedings{PredittoriPaperFaaS,
	author = {Shahrad, Mohammad and Balkind, Jonathan and Wentzlaff, David},
	title = {Architectural Implications of Function-as-a-Service Computing},
	year = {2019},
	isbn = {9781450369381},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3352460.3358296},
	doi = {10.1145/3352460.3358296},
	abstract = {Serverless computing is a rapidly growing cloud application model, popularized by Amazon's Lambda platform. Serverless cloud services provide fine-grained provisioning of resources, which scale automatically with user demand. Function-as-a-Service (FaaS) applications follow this serverless model, with the developer providing their application as a set of functions which are executed in response to a user- or system-generated event. Functions are designed to be short-lived and execute inside containers or virtual machines, introducing a range of system-level overheads. This paper studies the architectural implications of this emerging paradigm. Using the commercial-grade Apache OpenWhisk FaaS platform on real servers, this work investigates and identifies the architectural implications of FaaS serverless computing. The workloads, along with the way that FaaS inherently interleaves short functions from many tenants frustrates many of the locality-preserving architectural structures common in modern processors. In particular, we find that: FaaS containerization brings up to 20x slowdown compared to native execution, cold-start can be over 10x a short function's execution time, branch mispredictions per kilo-instruction are 20x higher for short functions, memory bandwidth increases by 6x due to the invocation pattern, and IPC decreases by as much as 35% due to inter-function interference. We open-source FaaSProfiler, the FaaS testing and profiling platform that we developed for this work.},
	booktitle = {Proceedings of the 52nd Annual IEEE/ACM International Symposium on Microarchitecture},
	pages = {1063–1075},
	numpages = {13},
	keywords = {architecture, faas, cloud, function-as-a-service, serverless, OpenWhisk},
	location = {Columbus, OH, USA},
	series = {MICRO '52}
}

@INPROCEEDINGS{IoTFaaS,
	
	author={McGrath, Garrett and Brenner, Paul R.},
	
	booktitle={2017 IEEE 37th International Conference on Distributed Computing Systems Workshops (ICDCSW)}, 
	
	title={Serverless Computing: Design, Implementation, and Performance}, 
	
	year={2017},
	
	volume={},
	
	number={},
	
	pages={405-410},
	
	doi={10.1109/ICDCSW.2017.36}}


@INPROCEEDINGS{IOTTSDB,  author={Rinaldi, Stefano and Bonafini, Federico and Ferrari, Paolo and Flammini, Alessandra and Sisinni, Emiliano and Bianchini, Devis},  booktitle={2019 IEEE International Instrumentation and Measurement Technology Conference (I2MTC)},   title={Impact of Data Model on Performance of Time Series Database for Internet of Things Applications},   year={2019},  volume={},  number={},  pages={1-6},  doi={10.1109/I2MTC.2019.8827164}}


@INPROCEEDINGS{TechnicalDebt,  author={de Jesus, Jandisson S. and de Melo, Ana C.V.},  booktitle={2017 IEEE 19th Conference on Business Informatics (CBI)},   title={Technical Debt and the Software Project Characteristics. A Repository-Based Exploratory Analysis},   year={2017},  volume={01},  number={},  pages={444-453},  doi={10.1109/CBI.2017.62}}

@INPROCEEDINGS{TechnicalDebtFalessi,  author={Falessi, Davide and Reichel, Andreas},  booktitle={2015 IEEE 7th International Workshop on Managing Technical Debt (MTD)},   title={Towards an open-source tool for measuring and visualizing the interest of technical debt},   year={2015},  volume={},  number={},  pages={1-8},  doi={10.1109/MTD.2015.7332618}}

@INPROCEEDINGS{CodeSmell,
	
	author={Das, Ananta Kumar and Yadav, Shikhar and Dhal, Subhasish},
	
	booktitle={TENCON 2019 - 2019 IEEE Region 10 Conference (TENCON)}, 
	
	title={Detecting Code Smells using Deep Learning}, 
	
	year={2019},
	
	volume={},
	
	number={},
	
	pages={2081-2086},
	
	doi={10.1109/TENCON.2019.8929628}}


@misc{go2,
	title = {Frequently Asked Questions about Go programming language},
	year = "2022",
	howpublished = "\url{https://go.dev/doc/faq}",
	note = "[Online; accessed 09-April-2022]"
}

@INPROCEEDINGS{JAVAVSGO,
	
	author={Togashi, Naohiro and Klyuev, Vitaly},
	
	booktitle={2014 4th IEEE International Conference on Information Science and Technology}, 
	
	title={Concurrency in Go and Java: Performance analysis}, 
	
	year={2014},
	
	volume={},
	
	number={},
	
	pages={213-216},
	
	doi={10.1109/ICIST.2014.6920368}}


@misc{cassandra,
	title = {Cassandrea - Open Source NoSQL Database},
	year = "2022",
	howpublished = "\url{https://cassandra.apache.org/_/index.html}",
	note = "[Online; accessed 09-April-2022]"
}

@misc{lpsolve,
	title = {\texttt{lp\_solve} - A Mixed Integer Linear Programming solver.},
	year = "2022",
	howpublished = "\url{https://web.mit.edu/lpsolve/doc/}",
	note = "[Online; accessed 09-April-2022]"
}

